<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build Chaibio shoftware</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.28.0">
      <projectUrl>https://github.com/chaibio/chaipcr.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>build_machine</name>
          <description>Building machine</description>
          <defaultValue>10.0.100.240</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>bypass_julia</name>
          <description>Add julia to the build.</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>download_prefix</name>
          <description>Download folder URL</description>
          <defaultValue>http://10.0.1.20/download</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>is_dev</name>
          <description>Build a development image</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo checking Jenkins server
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
echo user: $(whoami)

echo Checking for nessasery packages:
sudo apt-get -y -q install sshpass parted mdadm

if grep $build_machine /var/lib/jenkins/.ssh/config
then
	echo /var/lib/jenkins/.ssh/config was patched already
else
	echo patching /var/lib/jenkins/.ssh/config
	cat &lt;&lt;EOF &gt;&gt; /var/lib/jenkins/.ssh/config
Host $build_machine
		KexAlgorithms +diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers +3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#		KexAlgorithms +diffie-hellman-group1-sha1
#        KexAlgorithms +curve25519-sha256@libssh.org
#        KexAlgorithms +ecdh-sha2-nistp256
#        KexAlgorithms +ecdh-sha2-nistp384
#        KexAlgorithms +ecdh-sha2-nistp521
#        KexAlgorithms +diffie-hellman-group-exchange-sha256
#        KexAlgorithms +diffie-hellman-group14-sha1
EOF
fi

#if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
#then
#	echo sshd_config was patched already
#else
#	echo patching sshd_config
#	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
#KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#EOF
#	sudo service sshd restart
#fi

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine

echo deleting root password in case of chaipcr
sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;passwd -d -u root&quot;

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;

if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
then
	echo sshd_config on $build_machine was patched already
else
	echo patching sshd_config
    
    cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr

EOF
	ssh-keygen -A || true

	sudo service sshd restart
    sudo service ssh restart
    /etc/init.d/ssh restart
	echo $build_machine patched
    ifconfig
fi

exit 0
ENDSSH

echo returned to host. connection check:
counter=0
until ssh -t root@$build_machine &apos;exit 0&apos;
do
	counter=$(( $counter + 1 ))
    if [ $counter -gt 10 ]
    then
    	echo Beaglebone is not available.
    	exit 1
    fi
	echo waiting for beaglebone to become connectable.
	sleep 10
    
done

echo done connection check.
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Building ${PROJECT_NAME} - Build # ${BUILD_NUMBER}.. result is at ${BUILD_URL}&quot;
echo &quot;Slave Beaglebone at ${build_machine}&quot;
echo checking build device 
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h

swapoff -a

umount /dev/mmcblk0p*
umount /sdcard/*

lsblk
if mount | grep mmcblk0
then
  echo &quot;Error: can&apos;t unmount sdcard!&quot;
  exit 1
fi
dpkg --configure -a

exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>#	echo update sources# if not updated?
echo kernel is updated	
lsb_release -a
uname -a
df -h

apt-get update
dpkg --configure -a
apt-get autoremove -q -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* 
apt-get autoremove -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* libts-0.0-0 libts-bin libts-dev
apt-get autoremove -q -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb*
apt-get autoremove -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* libts-0.0-0 libts-bin libts-dev
apt-get autoremove -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* 
apt-get autoremove -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* libts-0.0-0 libts-bin libts-dev
apt-get -y -q purge qt4-*
dpkg --configure -a

apt-get -y clean
apt-get -y autoremove
apt-get -y autoclean

dpkg --configure -a

apt-get upgrade -y -q
dpkg --configure -a
df -h

echo packages installation done

apt-key update
apt-get update 
dpkg --configure -a
apt-get install -y -q git || exit 1
dpkg --configure -a
update-initramfs -u
touch /forcefsck

echo rebooting for changes to take effect.
sync
df -h
shutdown -r 1
echo a reboot is scheduled after a minute.
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo waiting for a restart
sleep 60
for i in {0..300..60}
do
	echo &quot;Waiting for the build device to become ready! $i&quot;
	sleep 60
    if ping $build_machine -c 1
    then
    	echo device is finally up !!
        sleep 30
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>#!/bin/bash
apt-get update
apt-get -q -y install unzip parted || exit 1

sync

echo installing basic packages.
apt-get -y -q install g++ ntp ntpdate git unzip automake sshpass build-essential || exit 1
dpkg --configure -a
sync
sleep 30

if  g++ --version | grep 4.6
then
apt-key update
apt-get update
apt-get -y upgrade
dpkg --configure -a
apt-get -y install g++-4.7
apt-get clean
apt-get autoclean
dpkg --configure -a
rm /usr/bin/gcc
rm /usr/bin/g++
ln -s /usr/bin/gcc-4.7 /usr/bin/gcc
ln -s /usr/bin/g++-4.7 /usr/bin/g++
fi

df -h

echo Installing mysql
dpkg --configure -a

if mount | grep /data
then
    echo data partition is mounted
else
    echo mounting data partition
    mount /dev/mmcblk1p2 /data || true
    service mysql start
fi

sudo debconf-set-selections &lt;&lt;&lt; &quot;mysql-server-5.5 mysql-server/root_password password chaipcr&quot;
sudo debconf-set-selections &lt;&lt;&lt; &quot;mysql-server-5.5 mysql-server/root_password_again password chaipcr&quot;

sudo debconf-set-selections &lt;&lt;&lt; &quot;mysql-server mysql-server/root_password password chaipcr&quot;
sudo debconf-set-selections &lt;&lt;&lt; &quot;mysql-server mysql-server/root_password_again password chaipcr&quot;

echo Installing mysql server package
export DEBIAN_FRONTEND=noninteractive
sudo -E apt-get install -y -q --allow-unauthenticated mysql-server

echo Installing mysql client package
if sudo -E apt-get install -y -q --allow-unauthenticated libmysqlclient-dev 
then
     echo mysql client is installed
else
     if sudo -E apt-get install -y -q --allow-unauthenticated default-libmysqlclient-dev  
     then
            echo default mysql client is installed
      else
            echo error installing default mysql client
            exit 1
      fi
fi
echo done installing mysql

echo resetting mysql password
cat &gt;&gt; mysql_password_flush.sql &lt;&lt; EOF
    UPDATE user SET password=PASSWORD(&apos;&apos;) WHERE user=&apos;root&apos;;
    FLUSH PRIVILEGES;
    exit
EOF

echo calling mysql command line
if mysql -u root --password=chaipcr mysql &lt; mysql_password_flush.sql 
then
      echo Done resetting mysql password.
else
     echo Checking if already MySQL password is empty.
     mysql -u root mysql &lt; mysql_password_flush.sql || exit 1
     echo MySQL password found empty.
fi

rm mysql_password_flush.sql
df -h
echo done resetting mysql password

# boxing transactions queue.
echo boxing transactions queue.
MYSQL_USER=root
MYSQL_CONN=&quot;-u${MYSQL_USER} --password=&quot;
SQL=&quot;SET GLOBAL innodb_fast_shutdown = 0&quot;
mysql ${MYSQL_CONN} -ANe&quot;${SQL}&quot;
mysqladmin ${MYSQL_CONN} shutdown
cd /var/lib/mysql
rm -f ib_logfile*
echo &quot;[mysqld]&quot;&gt;/etc/mysql/conf.d/chaibio.cnf
echo &quot;innodb_log_file_size = 5M&quot;&gt;&gt;/etc/mysql/conf.d/chaibio.cnf
service mysql start

</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo unmounting any sdcard folders and creating swap file
umount /sdcard/*
umount /dev/mmcblk0p*

LC_ALL=C /sbin/sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0x83,*
__EOF__

/sbin/partprobe /dev/mmcblk0
/sbin/mkfs.ext4 /dev/mmcblk0p1 -F
mkdir -p /sdcard/factory
if mount /dev/mmcblk0p1 /sdcard/factory/
then
    echo &quot;temp sdcard folder mounted&quot;
else
   echo &quot;Error mounting temp sdcard folder&quot;
   exit 1
fi

rm -r /sdcard/upgrade
ln -s /sdcard/factory /sdcard/upgrade

# creating a temporary swap file on sdcard
if fallocate -l 2G /sdcard/factory/swapfile #or dd if=/dev/zero of=/sdcard/factory/swapfile bs=10M count=300
then
    echo &quot;swap file created successfully&quot;
else
   echo &quot;failed creating swap file&quot;
   exit 1
fi

sudo chmod 600 /sdcard/factory/swapfile
sudo mkswap /sdcard/factory/swapfile
sudo swapon /sdcard/factory/swapfile

#verifying swap file is successfully added
sudo swapon -s

free -m</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Update Software
apt-key update
apt-get update

apt-get -y -q install lsb-release
sync
sleep 30

dpkg --configure -a
sync

apt-get -q -y update
apt-get -q -y install -f

apt-get -q -y install unzip || exit 1

dpkg --configure -a

echo &quot;FSCKFIX=yes&quot; &gt;&gt; /etc/default/rcS
apt-key list  | grep &quot;expired: &quot; | sed -ne &apos;s|pub .*/\([^ ]*\) .*|\1|gp&apos; | xargs -n1 sudo apt-key adv --keyserver keys.gnupg.net --recv-keys 
apt-get -q -y update

apt-get --force-yes -y -q install nodejs ruby ruby-dev  || exit 1
sync
sleep 30
dpkg --configure -a

apt-get --force-yes -y -q install libxslt-dev libxml2-dev  || exit 1
sync
sleep 30
dpkg --configure -a

apt-get -y -q install libtool || exit 1
dpkg --configure -a
sync
sleep 30

echo installing headers...
apt-get -y -q install linux-headers-`uname -r` || exit 1
apt-get install -y -q cmake || exit 1
sync
sleep 30
dpkg --configure -a

echo &quot;Build SOCI (or get its libs from repo)&quot;
cd ~

#http://downloads.sourceforge.net/project/soci/soci/soci-3.2.2/soci-3.2.2.tar.gz?r=&amp;ts=1481630635&amp;use_mirror=netix
#wget &quot;http://downloads.sourceforge.net/project/soci/soci/soci-3.2.2/soci-3.2.2.tar.gz&quot;
if $is_dev
then
      echo Building a debug image
      touch /root/debug_image
      cd /sdcard/factory/
fi

wget &quot;http://netix.dl.sourceforge.net/project/soci/soci/soci-3.2.2/soci-3.2.2.tar.gz&quot;
tar xpvzf soci-3.2.2.tar.gz
dpkg --configure -a
cd soci-3.2.2
cmake -DCMAKE_BUILD_TYPE=Release -DSOCI_STATIC=OFF -DSOCI_TESTS=OFF -DWITH_SQLITE3=OFF -DSOCI_EMPTY=OFF -DWITH_MYSQL=ON -G &quot;Unix Makefiles&quot; || exit 1
make || exit 1
make install || exit 1
cd ..

dpkg --configure -a

if $is_dev
then
      echo Building a debug image
else
     rm -rf soci-3.2.2*
fi

df -h
exit 0


</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo arranging to build julia and different libs
sync

df -h
apt-get -y -q install g++ ntp ntpdate git unzip automake sshpass build-essential || true
ntpdate -b -s -u pool.ntp.org

#sudo apt-get -q -y install gcc-4.8 g++-4.8 
sudo apt-get -q -y install libgfortran-6-dev liblapack3
sudo apt-get -q -y install libblas3gf liblapack3gf 
sudo apt-get -q -y install libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev gfortran libgfortran3 m4 libedit-dev parted git ntp build-essential hdf5-tools curl python pkg-config libssl-dev libc-bin  || exit 1
apt-get -f -y -q install

apt-get install -q -y libarpack2 libblas-common libblas3 libfftw3-double3 libfftw3-single3 libgfortran3 liblapack3 libllvm3.8 libmetis5 libopenblas-base libunwind8  || exit 1
apt-get -f -y -q install

sudo apt-get -q -y install libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev gfortran libgfortran3 m4 libedit-dev parted git ntp build-essential hdf5-tools curl python pkg-config libssl-dev libarpack2 libblas-common libblas3 libfftw3-double3 libfftw3-single3 libgfortran3 liblapack3 libllvm3.8 libmetis5 libopenblas-base libunwind8 liblapack-dev liblapack3 libopenblas-base libopenblas-dev || exit 1
apt-get -f -y -q install

apt-get -y -q install i2c-tools evtest git automake libtool || exit 1 
apt-get -y -q install device-tree-compiler || exit 1
apt-get -f -y -q install

sync
sync
fsck /dev/mmcblk1p1 -y -f
df -h
exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo installing POCO
if $is_dev
then
      echo Building a debug image
      cd /sdcard/factory/
fi

wget &quot;http://pocoproject.org/releases/poco-1.6.1/poco-1.6.1.tar.gz&quot;  || exit 1
tar xpvzf poco-1.6.1.tar.gz  || exit 1
cd poco-1.6.1
./configure || exit 1
make || exit 1

rm /usr/lib/libPoco* || true
rm /usr/local/lib/libPoco* || true

make install || exit 1
cd ..

if $is_dev
then
      echo Building a debug image
else
      rm -rf poco-1.6.1* poco-1.6.1.tar.gz
fi


sync
fsck /dev/mmcblk1p1 -y -f
df -h

exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo cleanup without envs

apt-get -y -q install g++ ntp ntpdate git unzip automake sshpass build-essential || true
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get install -q -y gfortran ntpdate || exit 1
ntpdate -b -s -u pool.ntp.org
sync

apt-get autoremove -q -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* || exit 1

echo cleanup with envs
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get autoremove -q -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* || exit 1

apt-get clean
apt-get autoclean

apt-get -q -y autoremove

# tslib
#??sudo apt-get install -y tslib libts-bin
echo building tslib
cd

echo installing with envs..
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get -y -q install i2c-tools evtest git automake libtool  || exit 1
echo with no envs
apt-get -y -q install i2c-tools evtest git automake libtool  || exit 1

git clone git://github.com/kergoth/tslib.git
cd tslib
cat &gt;&gt; /usr/include/linux/input.h &lt;&lt; __EOF__
#undef ABS_MAX
#undef ABS_CNT
#define ABS_MT_TOOL_X           0x3c    /* Center X tool position */
#define ABS_MT_TOOL_Y           0x3d    /* Center Y tool position */
#define ABS_MAX                 0x3f
#define ABS_CNT                 (ABS_MAX+1)
__EOF__

echo autoget tslib
./autogen.sh
echo configure tslib
./configure
echo making tslib
make || exit 1
echo installing tslib
make install || exit 1
cd
echo cleaning up
rm -r tslib

sync

echo Set environment variables 
cat &gt; ~/.profile &lt;&lt; EOL
    export SLOTS=/sys/devices/platform/bone_capemgr/slots
    export PINS=/sys/kernel/debug/pinctrl/44e10800.pinmux/pins
    export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
    export TSLIB_TSEVENTTYPE=INPUT
    export TSLIB_CONSOLEDEVICE=none
    export TSLIB_FBDEVICE=/dev/fb0
    export TSLIB_CALIBFILE=/etc/pointercal
    export TSLIB_CONFFILE=/etc/ts.conf
    export TSLIB_PLUGINDIR=/usr/local/lib/ts
    export TSLIB_TSDEVICE=/dev/input/event1
    export POINTERCAL_FILE=/etc/pointercal
    export QWS_MOUSE_PROTO=tslib:/dev/input/event1
EOL
source ~/.profile

# Calibrate Touchscreen
cp /usr/local/etc/ts.conf /etc/
# maybe we can perform calibration on first use

#Edit /etc/ts.conf to uncomment the second line:
sed -i &apos;s/#module_raw input/module_raw input/&apos; /etc/ts.conf

#Run ts_configure and press crosshairs on LCD.. maybe on first run

echo check ldconfig
which ldconfig

echo patching /etc/ld.so.conf
echo &quot;/usr/local/lib&quot; &gt;&gt; /etc/ld.so.conf
ldconfig

apt-key update
apt-get update
apt-get -y -q upgrade

apt-get -y -q install g++ ntp ntpdate git unzip automake sshpass build-essential || true

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get install -q -y gfortran ntpdate || exit 1

df -h
exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo downloading and installing Julia
sync
#pufreq-set --governor ondemand 
echo 1500 &gt; /proc/sys/kernel/hung_task_timeout_secs

# add gfortran link to search path. 
ln -s /usr/lib/gcc/arm-linux-gnueabihf/4.9/libgfortran.so /usr/lib/libgfortran.so

free -m
apt-get -q -y install libnlopt0
apt-get -q -y install libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev libedit-dev parted git ntp build-essential curl python pkg-config libssl-dev libarpack2 libblas3 liblapack3

if $bypass_julia
then
       echo Bypassing JULIA
       touch /etc/bypassjulia.flag
       exit 0
fi

apt-get -q -y install libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev gfortran libgfortran3 m4 libedit-dev parted git ntp build-essential hdf5-tools curl python pkg-config libssl-dev libarpack2 libblas3 libgfortran3 liblapack3  || exit 1

mkdir -p /sdcard/factory/julia-compile
cd /sdcard/factory/julia-compile

mkdir downloadjulia
cd downloadjulia
wget https://julialang-s3.julialang.org/bin/linux/armv7l/0.6/julia-0.6.3-linux-armv7l.tar.gz
#wget https://julialang-s3.julialang.org/bin/linux/armv7l/0.6/julia-0.6.2-linux-armv7l.tar.gz
#tar xfvz julia-0.6.2-linux-armv7l.tar.gz
tar xfvz julia-0.6.3-linux-armv7l.tar.gz
cp -r julia-*/* /usr/

cd ..
rm -r downloadjulia
sync

if $is_dev
then
      echo Building a debug image
      echo &quot;export JULIA_PKGDIR=/sdcard/factory/.julia&quot;&gt;&gt;~/.profile
      export JULIA_PKGDIR=/sdcard/factory/.julia
else
      echo Formatting disk!  
      echo &quot;export JULIA_PKGDIR=/root/.julia&quot;&gt;&gt;~/.profile
      export JULIA_PKGDIR=/root/.julia
fi

source ~/.profile
sync
sleep 60

if [ -e /usr/share/julia/bin/julia ] &amp;&amp; [ ! -e /usr/bin/julia ]
then
	ln -sf /usr/share/julia/bin/julia /usr/bin/julia
fi

#============== test
echo test finished. cleaning..
sync


      apt-get  -y -q install  libblas3gf libblas3gf
      apt-get install -y -q liblapack-dev
      apt install -y -q liblapack-dev libblas-dev
      apt install -y -q libmysqlclient-dev

#      sed -i &apos;1i using DataArrays&apos; /root/chaipcr/bioinformatics/juliaserver.jl
#      sed -i &apos;1i push!(LOAD_PATH, &quot;/root/chaipcr/bioinformatics/QpcrAnalysis/&quot;)&apos; /root/chaipcr/bioinformatics/juliaserver.jl

      echo Build time- adding pre-requesits
      free -m
      apt-get update
      apt-get -q -y --fix-broken install
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get -q -y install libgtk-3-0
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get -q -y install libpango1.0-0 
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get -q -y install libglib2.0-0
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get -q -y install libcairo2
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get -q -y install gettext

apt-get -q -y --fix-broken install

DEBIAN_FRONTEND=noninteractive apt-get -q -y install gettext
DEBIAN_FRONTEND=noninteractive apt-get -q -y install libgtk-3-0
apt-get -y -q install libpango1.0-0 libglib2.0-0 libcairo2

echo $(date) Performing precompilling julia packages
if [ -e /tmp/mysql.sock ]
then
	echo &quot;MySQL sockets file found&quot;
else
	if [ -e /run/mysqld/mysqld.sock ]
	then
		echo &quot;Clonning MySQL sockets file&quot;
		ln -s /run/mysqld/mysqld.sock /tmp/mysql.sock
	else
		echo &quot;MySQL sockets file not found.&quot; 
		exit 1
	fi
fi

cd
rm -r /sdcard/factory/julia-compile
sync

sync
fsck /dev/mmcblk1p1 -y -f
fsck /dev/mmcblk0p1 -y -f

/sbin/fsck /dev/mmcblk1p1 -y -f
/sbin/fsck /dev/mmcblk0p1 -y -f

sync

sleep 60

echo &quot;Setting up Julia: Initializing rep&quot;

cd /tmp
wget https://github.com/chaibio/chaipcr/raw/master/bioinformatics/setup.jl
if $is_dev
then
      echo Building a debug image
      rm -r /sdcard/factory/.julia
else
      rm -r ~/.julia
fi


julia -e &apos;include(&quot;/tmp/setup.jl&quot;)&apos;

apt-get -y -q install libglib2.0-0
apt --fix-broken install -y -q

sync

echo &quot;Setting up Julia: Updating rep&quot;

echo precompiling mandatory packages.
cat &lt;&lt;EOF &gt;&gt; chaibio_packages.jl

	Pkg.build(&quot;DataArrays&quot;,&quot;DataStructures&quot;, &quot;SpecialFunctions&quot;, &quot;MathProgBase&quot;, &quot;HDF5&quot;, &quot;Clustering&quot;, &quot;Nullables&quot;,&quot;JSON&quot;, &quot;JLD&quot;, &quot;NLopt&quot;, &quot;JuMP&quot;, &quot;HttpServer&quot;, &quot;ProfileView&quot;, &quot;Dierckx&quot;, &quot;Ipopt&quot;, &quot;MySQL&quot;, &quot;DataFrames&quot;)
	println(&quot;Building: Done&quot;)

	println(&quot;Pinning all done&quot;)
	using DataStructures, SpecialFunctions, MathProgBase, HDF5, Clustering
               println(&quot;Used DataStructures, SpecialFunctions, MathProgBase, HDF5, Clustering&quot;)
	using JSON, JLD, NLopt, JuMP, HttpServer, ProfileView, DataArrays
        println(&quot;Used JSON, JLD, NLopt, JuMP, HttpServer, ProfileView, DataArrays&quot;)
	using Dierckx, Ipopt, MySQL, DataFrames
	println(&quot;All packages used&quot;)

	Pkg.status()
	println(&quot;Using: Done&quot;)

println(&quot;Setting up Julia: done testing.. quitting..&quot;)
quit()
EOF
sync
sleep 60

# leave julia staff to be able to test why it crashes the system
if julia chaibio_packages.jl
then
    echo pinning all done
else
    echo Error pinning julia packages
    exit 1
fi

rm chaibio_packages.jl

cd /tmp
wget https://github.com/chaibio/chaipcr/raw/master/bioinformatics/setup.jl
if $is_dev
then
      echo Building a debug image
      sed -i &apos;s/is_nullable = mysql_is/is_nullable = false # mysql_is/&apos; /sdcard/factory/.julia/v0.6/MySQL/src/types.jl
else
      sed -i &apos;s/is_nullable = mysql_is/is_nullable = false # mysql_is/&apos; /root/.julia/v0.6/MySQL/src/types.jl
fi

echo test finished. cleaning..
sync
cd
rm -r ~/julia-compile
df -h
sync
sync
fsck /dev/mmcblk1p1 -y -f
fsck /dev/mmcblk0p1 -y -f

#find . -name .git -execdir rm -r {} \;
#find . -name *.o  -exec rm {} \;

if $is_dev
then
      echo Building a debug image
      exit 0
fi

rm -r /var/cache/apt /var/log/ /opt/QtEmbedded/imports /opt/QtEmbedded/translations /opt/QtEmbedded/tests
mkdir /var/log/ -p

# remove part of .git folder to save more space. Keeping the .git/objects folder under the packages because Pkg.status() verify the package number from there. An extra chance to save space is available here by cherry pick the exact file needed by Pkg.status().

find /root/.julia/v0.6/ -name .git | grep -v METADATA | xargs -I &apos;{}&apos; rm -r &apos;{}&apos;/logs/
find /root/.julia/.cache/ -name objects | grep -v METADATA | xargs -I &apos;{}&apos; rm -r &apos;{}&apos;

apt update

exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo installing QT
dpkg --configure -a

apt-get update
apt-get install -y -q libfontconfig1-dev libfreetype6-dev

echo downloading compiled QT v4.8.6
cd /sdcard/factory/
#wget $download_prefix/qt-everywhere-compiled-4.8.6.tgz
wget $download_prefix/qt-everywhere-slim-4.8.6.tgz
tar xfv qt-everywhere-slim-4.8.6.tgz

echo installing tslib first
cd tslib-compile/tslib/
make install  || exit 1
cd ../..

echo downloading QT binaries
#cd qt-everywhere-opensource-src-4.8.6/
#make install || exit 1
mv opt/QtEmbedded /opt
rm -r /opt/QtEmbedded/examples/

cp /opt/QtEmbedded/bin /usr/lib/arm-linux-gnueabihf/qt4/ -r || true

echo done installing QT to /opt/

if $is_dev
then
      echo Building a debug image
else
    cd /sdcard/factory/
    rm -r qt-everywhere-opensource-src-4.8.6
    rm qt-everywhere-compiled-4.8.6.tgz
    rm qt-everywhere-slim-4.8.6.tgz
    rm -r tslib-compile
    rm -r opt
    cd
fi
sync
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command></command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>if $bypass_julia
then
       echo Bypassing JULIA check
       exit 0
fi

echo checking julia installation
which julia
julia --version

exit 0




</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>#echo cleaning julia build
#cd /sdcard/factory
#rm -r julia-compile
#sync

echo Disable Services
systemctl disable cloud9.service
systemctl disable bonescript.service
systemctl disable bonescript.socket
systemctl disable bonescript-autorun.service
rm /etc/systemd/system/sockets.target.wants/cloud9.socket

echo ifup script fix
echo &quot;Due to a bug (https://bugs.launchpad.net/ubuntu/+source/ntp/+bug/1206164) a script from ifup has to be fixed&quot;
sed -i &apos;s/) \&amp;/) &lt;\/dev\/null &gt;\/dev\/null 2&gt;\&amp;1 \&amp;/g&apos; /etc/network/if-up.d/ntpdate

apt-get clean
apt-get autoclean

apt-get -q -y autoremove
sync

DEBIAN_FRONTEND=noninteractive apt-get -y -q install nginx-full  || exit 1
DEBIAN_FRONTEND=noninteractive dpkg --configure -a
sync
sleep 30

sync
fsck /dev/mmcblk1p1 -y -f
fsck /dev/mmcblk0p1 -y -f
df -h
exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Install Ruby Packages
gem install bundle
#apt-get -q -y install nodejs 
#gem install nodejs
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Build gems with native extensions
bundle config build.atomic --use-system-libraries || exit 1
bundle config build.json --use-system-libraries || exit 1
bundle config build.sqlite3 --use-system-libraries || exit 1
bundle config build.nokogiri --use-system-libraries || exit 1

df -h</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Remote Support Access
sync
echo &quot;temp\ntemp\nAny name\n\n\n\n\n\n&quot; | adduser service # any pw will do, will delete it below

echo setting up service user
adduser service sudo
mkdir /root/.ngrok2
mkdir /home/service/.ssh
chown service /home/service/.ssh
chgrp service /home/service/.ssh
cd

sync

#wget https://dl.ngrok.com/ngrok_2.0.19_linux_arm.zip --no-check-certificate
wget $download_prefix/ngrok_2.0.19_linux_arm.zip  --no-check-certificate
unzip -o ngrok_2.0.19_linux_arm.zip
rm ngrok_2.0.19_linux_arm.zip
rm ngrok
df -h
exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo removing service user password
#Edit /etc/shadow, remove password for service by setting pw to *
passwd service -d
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo installing boost
sync
# much space
#apt-get -q -y install libboost-all-dev || exit 1
apt-get -q -y install libboost-chrono-dev libboost-system-dev || exit 1

df -h
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo zeroing

dd if=/dev/zero of=/zeros.bigfile bs=16M
sync
rm /zeros.bigfile
sync
mkdir -p /tmp/zeroer
if mount /dev/mmcblk1p2 /tmp/zeroer
then
    dd if=/dev/zero of=/tmp/zeroer/zeros.bigfile bs=16M
    sync
    rm /tmp/zeroer/zeros.bigfile
    sync
    umount /tmp/zeroer
fi

if mount /dev/mmcblk1p3 /tmp/zeroer
then
    dd if=/dev/zero of=/tmp/zeroer/zeros.bigfile bs=16M
    sync
    rm /tmp/zeroer/zeros.bigfile
    sync
    umount /tmp/zeroer
fi
df -h
echo basic beaglebone setup done!</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>echo all 3rd party software done for $build_machine, you can call call deploy_chibio job to add chibio software now.

exit 0</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.8"/>
  </buildWrappers>
</project>