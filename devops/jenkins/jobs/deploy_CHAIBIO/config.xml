<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build Chaibio shoftware</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>build_machine</name>
          <description>Building machine</description>
          <defaultValue>10.0.100.240</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.scm.listtagsparameter.ListSubversionTagsParameterDefinition plugin="subversion@2.9">
          <name>build_branch</name>
          <description>Select a Subversion entry</description>
          <tagsDir>https://github.com/chaibio/chaipcr</tagsDir>
          <credentialsId></credentialsId>
          <tagsFilter></tagsFilter>
          <reverseByDate>true</reverseByDate>
          <reverseByName>false</reverseByName>
          <defaultValue></defaultValue>
          <maxTags></maxTags>
        </hudson.scm.listtagsparameter.ListSubversionTagsParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>is_dev</name>
          <description>Build a development image.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.5.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/chaibio/chaipcr.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo checking Jenkins server
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
echo user: $(whoami)

echo Checking for nessasery packages:
sudo apt-get -y -q update
sudo apt-get -y -q install sshpass parted
sudo apt-get -y -q install ruby
sudo apt-get -y -q install inetutils-traceroute
sudo apt-get -y -q install install mdadm npm 
sudo apt-get -y -q install nodejs ruby-dev 
sudo apt-get -y -q install libxslt-dev 
sudo apt-get -y -q install libxml2-dev
sudo apt-get -q -y install npm

if grep $build_machine /var/lib/jenkins/.ssh/config
then
	echo /var/lib/jenkins/.ssh/config was patched already
else
	echo patching /var/lib/jenkins/.ssh/config
	cat &lt;&lt;EOF &gt;&gt; /var/lib/jenkins/.ssh/config
Host $build_machine
		KexAlgorithms +diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers +3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#		KexAlgorithms +diffie-hellman-group1-sha1
#        KexAlgorithms +curve25519-sha256@libssh.org
#        KexAlgorithms +ecdh-sha2-nistp256
#        KexAlgorithms +ecdh-sha2-nistp384
#        KexAlgorithms +ecdh-sha2-nistp521
#        KexAlgorithms +diffie-hellman-group-exchange-sha256
#        KexAlgorithms +diffie-hellman-group14-sha1
EOF
fi

#if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
#then
#	echo sshd_config was patched already
#else
#	echo patching sshd_config
#	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
#KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#EOF
#	sudo service sshd restart
#fi

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine

echo deleting root password in case of chaipcr
sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;passwd -d -u root&quot;

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;

if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
then
	echo sshd_config on $build_machine was patched already
else
	echo patching sshd_config

cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr

EOF
	ssh-keygen -A || true

	sudo service sshd restart
    sudo service ssh restart
    /etc/init.d/ssh restart
	echo $build_machine patched
    ifconfig
fi

exit 0
ENDSSH

echo returned to host. connection check:
counter=0
until ssh -t root@$build_machine &apos;exit 0&apos;
do
	counter=$(( $counter + 1 ))
    if [ $counter -gt 10 ]
    then
    	echo Beaglebone is not available.
    	exit 1
    fi
	echo waiting for beaglebone to become connectable.
	sleep 10
    
done

echo done connection check.
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Building ${PROJECT_NAME} - Build # ${BUILD_NUMBER}.. result is at ${BUILD_URL}&quot;
echo &quot;Slave Beaglebone at ${build_machine}&quot;
echo checking build device 
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h

swapoff -a

umount /dev/mmcblk0p*
umount /sdcard/*

lsblk
if mount | grep mmcblk0
then
  echo &quot;Error: can&apos;t unmount sdcard!&quot;
  exit 1
fi
dpkg --configure -a</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
# waiting 20min for the bulding device to become connectable
echo &quot;Waiting for the build device ($build_machine) to become ready!&quot;
#sleep 1500

for i in {0..1200..60}
do
	echo &quot;Waiting for the build device ($build_machine) to become ready! $i&quot;
	sleep 10

	if ping $build_machine -c 2
    then
    	echo device is finally up !!
        sleep 10
        
		ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
		ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;
		echo $build_machine device is connectable.. 
		lsblk
		exit 0
ENDSSH

		sleep 10
		echo returned to host. connection check:
		counter=0
		until ssh -t root@$build_machine &apos;exit 0&apos;
		do
			counter=$(( $counter + 1 ))
    		if [ $counter -gt 20 ]
    		then
    			echo Beaglebone is not available.
    			exit 1
		    fi
			echo waiting for ssh on beaglebone to become connectable.
			sleep 10
		done
		echo ssh is connectable.
        sleep 10

		echo now at $(pwd)
		branch_param=
        branch_name=

	    if [ -z $build_branch ] || ! [[ &quot;$build_branch&quot; == *\/* ]]  || [ &quot;$build_branch&quot; = &quot;trunk&quot; ]
		then
   			echo No build branch chosen
		else
     		branch_param=&quot;-b $(echo $build_branch | cut -d&apos;/&apos; -f 2)&quot;
            branch_name=&quot;$(echo $build_branch | cut -d&apos;/&apos; -f 2)&quot;
		    echo Cloning branch $branch_param
		fi

		sudo rm -r tmp || true
	 	mkdir tmp || true
        cd tmp
		git clone $branch_param https://github.com/chaibio/chaipcr.git || exit 1
        cd chaipcr || exit 1   
        if [ -z $build_branch ] || ! [[ &quot;$build_branch&quot; == *\/* ]] 
		then
   			echo No build branch chosen
		else
     		git checkout $branch_name
		fi

        cd web
        echo now at $(pwd)
        
        gem env
        if gem env | grep rubygems.org
        then
        	echo &quot;ruby source already added&quot;
        else
        	# this step is not important as we haverubygems.org/ under remote sources
        	gem sources --add https://rubygems.org/
            gem sources --add http://rubygems.org/
        fi
  		
        sudo apt-get -y -q install ca-certificates software-properties-common 

        sudo apt-add-repository -y ppa:rael-gc/rvm
        sudo apt-get update
        sudo apt-get -y -q install rvm nodejs nodejs-legacy
        sudo chmod 0777 /usr/share/rvm/tmp
        sudo chmod 0777 /usr/share/rvm/tmp/*
        sudo chmod 0777 /usr/share/rvm/*

		sudo rvm install ruby-2.2.9
        sudo /usr/share/rvm/bin/rvm install ruby-2.2.9

        source /etc/profile.d/rvm.sh
        sudo rvm install ruby-2.2.9
        sudo /usr/share/rvm/bin/rvm install ruby-2.2.9

		echo installing nodejs v4.5.0
 		sudo bash -ic &apos;curl https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash; export NVM_DIR=&quot;/var/lib/jenkins/.nvm&quot;; echo &quot;dir2: $NVM_DIR&quot;; [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; ; nvm install 4.5.0;nvm use 4.5.0&apos;
		

        sudo npm install --global gulp
        sudo npm install --global gulp-cli
        sudo npm install
        
        sudo gulp deploy || exit 1
        cd ..
        echo done gulp deploy
        
		rm -rf ./web/log

		rsync --delete --rsh=&quot;sshpass ssh -oStrictHostKeyChecking=no -l root&quot; -a ./web &quot;$build_machine:/root/chaipcr/&quot; || (echo error copying files to device &amp;&amp; exit 1)
		rsync --delete --rsh=&quot;sshpass ssh -oStrictHostKeyChecking=no -l root&quot; -a ./browser &quot;$build_machine:/root/chaipcr/&quot;  || (echo error copying files to device &amp;&amp; exit 1)
		rsync --delete --rsh=&quot;sshpass ssh -oStrictHostKeyChecking=no -l root&quot; -a ./bioinformatics &quot;$build_machine:/root/chaipcr/&quot;  || (echo error copying files to device &amp;&amp; exit 1)
		rsync --delete --rsh=&quot;sshpass ssh -oStrictHostKeyChecking=no -l root&quot; -a ./device/configuration.json &quot;$build_machine:/root/chaipcr/deploy/&quot;  || (echo error copying files to device &amp;&amp; exit 1)
		rsync --delete --rsh=&quot;sshpass ssh -oStrictHostKeyChecking=no -l root&quot; -a ./device/configuration.json &quot;$build_machine:/root/&quot;  || (echo error copying files to device &amp;&amp; exit 1)
		rsync --delete --rsh=&quot;sshpass ssh -oStrictHostKeyChecking=no -l root&quot; -a ./devops/factory_settings_sdcard/scripts/replace_uEnv.txt.sh &quot;$build_machine:/root/chaipcr/deploy/&quot;  || (echo error copying files to device &amp;&amp; exit 1)
		rsync --delete --rsh=&quot;sshpass ssh -oStrictHostKeyChecking=no -l root&quot; -a ./devops/device &quot;$build_machine:/root/chaipcr/deploy/&quot;  || (echo error copying files to device &amp;&amp; exit 1)
		rsync --delete --rsh=&quot;sshpass ssh -oStrictHostKeyChecking=no -l root&quot; -a ./modules &quot;$build_machine:/root/chaipcr/&quot;  || (echo error copying files to device &amp;&amp; exit 1)
		rsync --delete --rsh=&quot;sshpass ssh -oStrictHostKeyChecking=no -l root&quot; -a ./realtime/overlay &quot;$build_machine:/root/chaipcr/deploy/&quot;  || (echo error copying files to device &amp;&amp; exit 1)

        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1

</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Setup MySQL
mkdir /data /perm || true
systemctl stop mysql.service
mount /dev/mmcblk1p2 /data || true
mount /dev/mmcblk1p3 /perm || true

mv /var/lib/mysql /data/
sed -i &quot;s,datadir.*=.*,datadir=/data/mysql,g&quot; /etc/mysql/my.cnf # Edit /etc/mysql/my.cnf and change datadir to /data/mysql
sed -i &quot;s,datadir.*=.*,datadir=/data/mysql,g&quot; /etc/mysql/mariadb.conf.d/50-server.cnf # Edit /etc/mysql/my.cnf and change datadir to /data/mysql
systemctl start mysql.service

sync
cd

echo unmounting any sdcard folders
DEBIAN_FRONTEND=noninteractive apt-get -q -y  install parted

swapoff -a
umount /sdcard/*
umount /dev/mmcblk0p*

if $is_dev
then
      echo Building a debug image
else
      echo Formatting disk!  
LC_ALL=C /sbin/sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0x83,*
__EOF__
/sbin/partprobe /dev/mmcblk0
/sbin/mkfs.ext4 /dev/mmcblk0p1 -F

fi

mkdir -p /sdcard/factory || true
if mount /dev/mmcblk0p1 /sdcard/factory/
then
    echo &quot;temp sdcard folder mounted&quot;
else
   echo &quot;Error mounting temp sdcard folder&quot;
   exit 1
fi

rm -r /sdcard/upgrade
ln -s /sdcard/factory /sdcard/upgrade

# creating a temporary swap file on sdcard
if fallocate -l 2G /sdcard/factory/swapfile #or dd if=/dev/zero of=/sdcard/factory/swapfile bs=10M count=300
then
    echo &quot;swap file created successfully&quot;
else
   echo &quot;failed creating swap file&quot;
   exit 1
fi

sudo chmod 600 /sdcard/factory/swapfile
sudo mkswap /sdcard/factory/swapfile
sudo swapon /sdcard/factory/swapfile

#verifying swap file is successfully added
sudo swapon -s

free -m
apt autoremove -y -q
du -h --max-depth=1 /
df -h
exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Maintenance
df -h
export RAILS_ENV=production
export DEBIAN_FRONTEND=noninteractive
apt-get -y -q autoremove --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data
apt-get -y -q autoremove --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data

cd /root/chaipcr/web
bundle install
gem install bcrypt -v &apos;3.1.11&apos;
systemctl enable r.service
echo Setup Rails app
mkdir -p ~/chaipcr/web/config/
cat &lt;&lt;EOF &gt;&gt; ~/chaipcr/web/config/database.yml
    production:
      adapter: mysql2
      database: chaipcr
      pool: 5
      timeout: 5000
      username: root
      password:
EOF
echo database.yml created

cd /root/chaipcr/web
chmod 755 /root

#echo rserve 
#echo \n | gem install rserve-client #otherwise bundle fails, don&apos;t know why

echo bundle
echo &quot;\n&quot; | bundle

echo rake setup
echo &quot;\n&quot; | RAILS_ENV=production bundle exec rake db:setup

echo seed_fu
echo &quot;\n&quot; | RAILS_ENV=production bundle exec rake db:seed_fu 

echo Rails init
cd ~/chaipcr/web
bundle install
gem install bcrypt -v &apos;3.1.11&apos;
echo done rserev

echo running db migrate script
bundle exec rake db:migrate --trace # migrates database as needed

df -h

exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo precompile julia packages if needed
if [ -e /etc/bypassjulia.flag ]
then
    echo  Bypass julia build
    exit 0
fi

if [ -e /root/chaipcr/bioinformatics/juliaserver.jl ]
then
      julia -v
      echo about to start using QpcrAnalysis
      df -h
      free -m
      export DEBIAN_FRONTEND=noninteractive
apt-get -y -q autoremove --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data
apt-get -y -q autoremove --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data

        if [ -e /tmp/mysql.sock ]
	then
		echo &quot;MySQL sockets cloned file found&quot;
	else
		if [ -e /run/mysqld/mysqld.sock ]
		then
			echo &quot;Clonning MySQL sockets file&quot;
			ln -s /run/mysqld/mysqld.sock /tmp/mysql.sock
		else
			echo &quot;MySQL sockets file not found.&quot; 
		fi
	fi

	export PATH=$PATH:/sbin:/usr/sbin
	export TERM=linux
	echo &apos;debconf debconf/frontend select Noninteractive&apos; | debconf-set-selections
	DEBIAN_FRONTEND=noninteractive apt-get -q -y  install patchelf
	DEBIAN_FRONTEND=noninteractive apt-get -q -y  install libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev libedit-dev parted git ntp build-essential curl python pkg-config libssl-dev libarpack2 libblas3 liblapack3

	DEBIAN_FRONTEND=noninteractive apt-get -q -y install libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev gfortran libgfortran3 m4 libedit-dev parted git ntp build-essential hdf5-tools curl python pkg-config libssl-dev libarpack2 libblas3 libgfortran3 liblapack3  || exit 1

      pkill -9 julia
      pkill -9 julia
      pkill -9 julia
      pkill -9 julia
      pkill -9 julia
      ps -aux

      if $is_dev
      then
             echo Building a debug image
             echo Building precompiling julia on sdcard
             julia_pkgdir=&quot;/sdcard/factory&quot;
             export JULIA_PKGDIR=/sdcard/factory/.julia
             echo &quot;export JULIA_PKGDIR=/sdcard/factory/.julia&quot;&gt;&gt;~/.profile
      else
             echo freeing up some space
             rm -r /var/cache/apt /var/log/ /opt/QtEmbedded/imports /opt/QtEmbedded/translations /opt/QtEmbedded/tests
             mkdir /var/log/ -p
	     echo freeing up some space
	     # remove part of .git folder to save more space. Keeping the .git/objects folder under the packages because Pkg.status() verify the package number from there. An extra chance to save space is available here by cherry pick the exact file needed by Pkg.status().
	     apt update
	     find /root/.julia/v0.6/ -name .git | grep -v METADATA | xargs -I &apos;{}&apos; rm -r &apos;{}&apos;/logs/
	     find /root/.julia/.cache/ -name objects | grep -v METADATA | xargs -I &apos;{}&apos; rm -r &apos;{}&apos;
             apt update
             julia_pkgdir=&quot;/root&quot;
             export JULIA_PKGDIR=/root/.julia
      fi

       JULIA_ENV=production julia -e &apos;push!(LOAD_PATH, &quot;/root/chaipcr/bioinformatics/QpcrAnalysis/&quot;);reload(&quot;QpcrAnalysis&quot;);using QpcrAnalysis;&apos; --compile=all

       echo tested using QpcrAnalysis
       if [ -e ${julia_pkgdir}/.julia/lib/v0.6/QpcrAnalysis.ji ]
       then
            echo QpcrAnalysis package precompiled.
       else
            echo Error precompiling QpcrAnalysis package
            exit 1
       fi

	julia -e &apos;Pkg.add(&quot;BuildExecutable&quot;);Pkg.checkout(&quot;BuildExecutable&quot;)&apos;

	cd ${julia_pkgdir}/.julia/v0.6/BuildExecutable/src/

cat &lt;&lt; &apos;EOF&apos; &gt;  add_catch.patch

--- src/BuildExecutable.jl	2018-05-29 22:08:45.271522602 +0000
+++ src/BuildExecutable.jl	2018-05-29 20:48:13.108040252 +0000
@@ -143,10 +143,13 @@
     run(cmd)
     println()
 
+try
     println(&quot;running: rm -rf $(tmpdir) $(sys.buildfile).o $(sys.inference).o $(sys.inference).ji $(sys.inference0).o $(sys.inference0).ji&quot;)
     map(f-&gt; rm(f, recursive=true), [tmpdir, sys.buildfile*&quot;.o&quot;, sys.inference*&quot;.o&quot;, sys.inference*&quot;.ji&quot;, sys.inference0*&quot;.o&quot;, sys.inference0*&quot;.ji&quot;])
     println()
+end
 
+try
     if targetdir != nothing
         # Move created files to target directory
         for file in [exe_file.buildfile, sys.buildfile * &quot;.$(Libdl.dlext)&quot;, sys.buildfile * &quot;.ji&quot;]
@@ -194,7 +197,7 @@
             end
         end
     end
-
+end
     println(&quot;$(exe_file.targetfile) successfully created.&quot;)
     return 0
 end


EOF

echo Patching..

patch -i add_catch.patch || (echo error patching ExecBuilder package &amp;&amp; exit 1)
echo done installation.. creating execuitable:
rm add_catch.patch
#exit 0

JULIA=julia

cat &gt; /tmp/precompile_QpcrAnalysis.jl &lt;&lt; EOF

println(&quot;Starting precompile template !!!&quot;)
push!(LOAD_PATH, &quot;/root/chaipcr/bioinformatics/QpcrAnalysis/&quot;)

println(&quot;Using time: &quot;)
@time using QpcrAnalysis
println(&quot;Done Using!&quot;)

function main()

	println(&quot;Main is executed!&quot;)
	#reload(&quot;QpcrAnalysis&quot;)

	println(&quot;About to dispatch. First time dispatch time:&quot;)
	@time QpcrAnalysis.dispatch(&quot;amplification&quot;, &quot;{\&quot;calibration_info\&quot;:{\&quot;water\&quot;:{\&quot;calibration_id\&quot;:44,\&quot;step_id\&quot;:28},\&quot;channel_1\&quot;:{\&quot;calibration_id\&quot;:44,\&quot;step_id\&quot;:31},\&quot;channel_2\&quot;:{\&quot;calibration_id\&quot;:44,\&quot;step_id\&quot;:34}},\&quot;experiment_id\&quot;:68,\&quot;min_ct\&quot;:5,\&quot;baseline_cyc_bounds\&quot;:[],\&quot;cq_method\&quot;:\&quot;Cy0\&quot;}&quot;)

	println(&quot;dispatch time no JIT:&quot;)
	@time QpcrAnalysis.dispatch(&quot;amplification&quot;, &quot;{\&quot;calibration_info\&quot;:{\&quot;water\&quot;:{\&quot;calibration_id\&quot;:44,\&quot;step_id\&quot;:28},\&quot;channel_1\&quot;:{\&quot;calibration_id\&quot;:44,\&quot;step_id\&quot;:31},\&quot;channel_2\&quot;:{\&quot;calibration_id\&quot;:44,\&quot;step_id\&quot;:34}},\&quot;experiment_id\&quot;:68,\&quot;min_ct\&quot;:5,\&quot;baseline_cyc_bounds\&quot;:[],\&quot;cq_method\&quot;:\&quot;Cy0\&quot;}&quot;)
	println(&quot;Done dispatch time test&quot;)
	include(&quot;/root/chaipcr/bioinformatics/juliaserver.jl&quot;)
	println(&quot;Server Exit&quot;)
end

println(&quot;Done with precompilescript!&quot;)


EOF

cat &gt; /tmp/mkexec.jl &lt;&lt; EOF
println(&quot;Try dispatch on its own&quot;)
@time include(&quot;/tmp/precompile_QpcrAnalysis.jl&quot;)
println(&quot;Done checking dispatch.. now building executable..&quot;)

#Pkg.add(&quot;BuildExecutable&quot;)
#println(&quot;BE package is added&quot;)
using BuildExecutable
println(&quot;BE package is used&quot;)

build_executable(&quot;/root/qpcranalysis&quot;, &quot;/tmp/precompile_QpcrAnalysis.jl&quot;, &quot;/tmp/output/&quot;, &quot;native&quot;)
println(&quot;Executable creation finished&quot;)

EOF

rm -r /tmp/output/
mkdir -p /tmp/output/
ls /root/qpcranalysis &amp;&amp; rm /root/qpcranalysis

rm -r /usr/lib/lib/root/
mkdir -p /root/julia/julia6RBinaries/lib/lib/root/
mkdir -p /usr/lib/lib/root/

rm /usr/lib/lib/root/qpcranalysis.ji
rm /usr/lib/lib/root/qpcranalysis.so
rm /usr/share/julia/base/userimg.jl

echo creating the image
time JULIA_ENV=production $JULIA /tmp/mkexec.jl

mkdir -p /root/lib/root/
cp /usr/lib/lib/root/qpcranalysis.so /root/lib/root/qpcranalysis.so

fi

echo testing juliaserver script to make sure nothing left to precompile as we are removing the compilation tools later to free up space.

test_julia_server2()
{
     JULIA_ENV=production julia -e &apos;push!(LOAD_PATH, &quot;/root/chaipcr/bioinformatics/QpcrAnalysis/&quot;); 
     include(&quot;/root/chaipcr/bioinformatics/juliaserver.jl&quot;)&apos;
     echo error: julia server terminated
}

test_julia_server()
{
       if [ -e /tmp/output/qpcranalysis.so ] 
       then
             echo moving qpcranalysis.so
             date
             cp /tmp/output/qpcranalysis  /root/chaipcr/bioinformatics/
             cp /tmp/output/qpcranalysis.so /root/chaipcr/bioinformatics/
             rm -r /tmp/output

             echo running with qpcranalysis.so
             JULIA_ENV=production julia  -J /root/chaipcr/bioinformatics/qpcranalysis.so -e &apos;push!(LOAD_PATH, &quot;/root/chaipcr/bioinformatics/QpcrAnalysis/&quot;); include(&quot;/root/chaipcr/bioinformatics/juliaserver.jl&quot;)&apos;
             echo exit running with qpcranalysis.so
             date
       else
             echo running without qpcranalysis.so
             JULIA_ENV=production julia  -e &apos;push!(LOAD_PATH, &quot;/root/chaipcr/bioinformatics/QpcrAnalysis/&quot;); include(&quot;/root/chaipcr/bioinformatics/juliaserver.jl&quot;)&apos;
             echo exit running without qpcranalysis.so
             date
       fi
}

test_julia_server &amp;
echo starting julia server on a different thread
sleep 1800
echo julia server testing period due. Cleaning up.
rm -r /root/julia/julia6RBinaries/lib/lib/root/
rm -r /root/lib/root/

pkill -9 julia
pkill -9 julia
pkill -9 julia
pkill -9 julia
pkill -9 julia
sleep 100

ps -aux | grep julia
df -h
echo moving julia to eMMC
if $is_dev
then
     echo No clean for dev image
else
       echo Cleaning julia folder
       find /root/.julia/v0.6/ -name .git | grep -v METADATA | xargs -I &apos;{}&apos; rm -r &apos;{}&apos;
fi

df -h

exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>if $is_dev
then
      echo Building a debug image
      exit 0
fi

echo cleaning misc. file
rm -r /var/log/*.log
find . -name .git -execdir rm -r {} \;
find . -name *.o  -exec rm {} \;
find / -name .git -execdir rm -r {} \;
rm -r /var/cache/apt /var/log/ /opt/QtEmbedded/imports /opt/QtEmbedded/translations /opt/QtEmbedded/tests
mkdir /var/log/ -p

apt update

exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo browser compile
cd /sdcard/factory/
rm -r compile-browser || true
mkdir compile-browser
cd compile-browser/
apt-get install -y git make linux-headers-`uname -r` build-essential cmake curl pkg-config python sshpass unzip

branch_param=
branch_name=
if [ -z $build_branch ] || ! [[ &quot;$build_branch&quot; == *\/* ]]  || [ &quot;$build_branch&quot; = &quot;trunk&quot; ]
then
   echo No build branch chosen
else
     branch_param=&quot;-b $(echo $build_branch | cut -d&apos;/&apos; -f 2)&quot;
     branch_name=&quot;$(echo $build_branch | cut -d&apos;/&apos; -f 2)&quot;
     echo Cloning branch $branch_param
fi

git clone $branch_param https://github.com/chaibio/chaipcr.git || exit 1
cd chaipcr
if [ -z $build_branch ] || ! [[ &quot;$build_branch&quot; == *\/* ]]  || [ &quot;$build_branch&quot; = &quot;trunk&quot; ]
then
       echo No build branch chosen
else
     		git checkout $branch_name
fi

cd /sdcard/factory/compile-browser/chaipcr/browser/ || exit 1

rm /sdcard/factory/compile-browser/chaipcr/realtime/libraries/lib/libPoco*
rm /sdcard/factory/compile-browser/chaipcr/realtime/libraries/lib/libboost*
rm /sdcard/factory/compile-browser/chaipcr/realtime/libraries/lib/libsoci*

/opt/QtEmbedded/bin/qmake || exit 1
sed -i &quot;s/arm-unknown-linux-gnueabi-//&quot; Makefile
sed -i &apos;/^DEFINES[[:space:]]\+=/ s/$/ -DKERNEL_49/&apos; Makefile

make || exit 1
make install || exit 1
#cp realtime ~/tmp
#cp libraries/lib/* /usr/lib/

if $is_dev
then
      echo Building a debug image
else
      cd /sdcard/factory/
      rm -r compile-browser
     cd
fi

echo done compiling browser
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo compiling realtime

cd /sdcard/factory/
free -m
sync

rm -r /sdcard/factory/realtime-compile || true
mkdir -p /sdcard/factory/realtime-compile
cd /sdcard/factory/realtime-compile

branch_param=
branch_name=

if [ -z $build_branch ] || ! [[ &quot;$build_branch&quot; == *\/* ]]  || [ &quot;$build_branch&quot; = &quot;trunk&quot; ]
then
        echo No build branch chosen
else
         branch_param=&quot;-b $(echo $build_branch | cut -d&apos;/&apos; -f 2)&quot;
         branch_name=&quot;$(echo $build_branch | cut -d&apos;/&apos; -f 2)&quot;
	echo Cloning branch $branch_param
fi

git clone $branch_param https://github.com/chaibio/chaipcr.git || exit 1
cd chaipcr
if [ -z $build_branch ] || ! [[ &quot;$build_branch&quot; == *\/* ]]  || [ &quot;$build_branch&quot; = &quot;trunk&quot; ]
then
        echo No build branch chosen
else
     	git checkout $branch_name
fi

cd /sdcard/factory/realtime-compile/chaipcr/realtime || exit 1

cp util/instance.h control/
sed -i &quot;s/dataSapce/dataSpace/&quot; app/experimentcontroller.cpp
rm libraries/lib/libPoco*
rm libraries/lib/libboost*
rm libraries/lib/libsoci*

#qmake
/opt/QtEmbedded/bin/qmake || exit 1

sed -i &quot;s/arm-unknown-linux-gnueabi-//&quot; Makefile
sed -i &apos;/^DEFINES[[:space:]]\+=/ s/$/ -DKERNEL_49/&apos; Makefile

make || exit 1
make install || exit 1
#cp realtime ~/tmp
cp libraries/lib/* /usr/lib/
cd

if $is_dev
then
      echo Building a debug image
else
      rm -r /sdcard/factory/realtime-compile
fi

echo  Deploy realtime to ~/tmp
cp ~/chaipcr/deploy/device/realtime.service /lib/systemd/system/
systemctl disable realtime.service

sync
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo checking deployed web files
ls -ahl
if [ -e ~/chaipcr/deploy ]
then
	echo web files deploy done successfully
else
        echo error deploying ssh files
        exit 1
fi

#Replace uEnv.txt
echo Replacing uEnv.txt
cd ~/chaipcr/deploy/
./replace_uEnv.txt.sh
#sed -i &quot;s/errors=remount-ro/errors=continue/&quot; /etc/fstab

echo patching rc.local
cd /etc
if [ ! -e rc.local ]
then
    echo &quot;Cann&apos;t find rc.local. Creating it.&quot;
    cat &gt;&gt; rc.local &lt;&lt; EOF
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will &quot;exit 0&quot; on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

exit 0

EOF
chmod +x rc.local
fi

cd /etc        
patch -i ~/chaipcr/deploy/device/rc.local.patch  || (echo error patching rc.local &amp;&amp; exit 1)
cd
sync

echo Disable Mass-storage mini-usb
cd /opt/scripts/boot        
patch -i ~/chaipcr/deploy/device/storage.disable.patch  || (echo error adding storage disable patch &amp;&amp; exit 1)
cd ~
sync

echo Update Networking
sed -i &apos;s/#auto eth0/auto eth0/&apos; /etc/network/interfaces
sed -i &apos;s/#iface eth0/iface eth0/&apos; /etc/network/interfaces

sed -i &apos;s/#timeout 60/timeout 20/&apos; /etc/dhcp/dhclient.conf
sed -i &apos;s/#retry 60/retry 20/&apos; /etc/dhcp/dhclient.conf
sed -i &apos;s/#reboot/reboot/&apos; /etc/dhcp/dhclient.conf

echo Disabling usb1
cd /opt/scripts/boot        

[ -e temp.patch ] &amp;&amp; rm temp.patch
cat &gt;&gt; temp.patch &lt;&lt; EOF
--- am335x_evm.sh       2018-10-04 15:06:36.889361025 +0200
+++ am335x_evm.sh       2018-10-04 15:06:26.649444094 +0200
@@ -682,17 +682,17 @@
 compare_major=&quot;4&quot;
 compare_minor=&quot;4&quot;

-if [ &quot;\${kernel_major}&quot; -lt &quot;\${compare_major}&quot; ] ; then
+#if [ &quot;\${kernel_major}&quot; -lt &quot;\${compare_major}&quot; ] ; then
 	use_old_g_multi
-elif [ &quot;\${kernel_major}&quot; -eq &quot;\${compare_major}&quot; ] ; then
-	if [ &quot;\${kernel_minor}&quot; -lt &quot;\${compare_minor}&quot; ] ; then
-		use_old_g_multi
-	else
-		use_libcomposite
-	fi
-else
-	use_libcomposite
-fi
+#elif [ &quot;\${kernel_major}&quot; -eq &quot;\${compare_major}&quot; ] ; then
+#	if [ &quot;\${kernel_minor}&quot; -lt &quot;\${compare_minor}&quot; ] ; then
+#		use_old_g_multi
+#	else
+#		use_libcomposite
+#	fi
+#else
+#	use_libcomposite
+#fi
 
 if [ -f /var/lib/misc/dnsmasq.leases ] ; then
 	systemctl stop dnsmasq || true
EOF

patch -i temp.patch  || (echo error adding usb1 patch &amp;&amp; exit 1)
rm temp.patch

exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Configure Logrotate
cp ~/chaipcr/deploy/device/logrotate/logrotate.conf /etc
cp ~/chaipcr/deploy/device/logrotate/logrotate.d/* /etc/logrotate.d/
mv /etc/cron.daily/logrotate /etc/cron.hourly/ 

echo Build/update wifi drivers- ignored now.. lets see if the latest is making any issues

echo copy browser resources
# Deploy browser to ~/tmp
cp -r ~/chaipcr/browser/resources ~/tmp/
cp ~/chaipcr/browser/qpcrbrowser.service /lib/systemd/system/
systemctl enable qpcrbrowser.service</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Install device tree overlay and PRU binary(do this every time it changes):&quot;
cd ~/chaipcr/deploy/overlay
bash ./build.sh
echo chai-pcr &gt; /sys/devices/platform/bone_capemgr/slots &amp;
sleep 60

cat /sys/devices/platform/bone_capemgr/slots

exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Build/install LCD drivers
# this needs some optimization.. it takes 90MB
apt-get  -y -q install device-tree-compiler
cd ~/chaipcr/modules/LCDtouch_V3/49
chmod 775 install_debian.sh

mkdir -p /boot/dts/
mkdir -p /lib/firmware/

./install_debian.sh
if $is_dev
then
      echo Building a debug image
else
      apt-get  -y -q --purge autoremove device-tree-compiler
fi
modprobe -i tilcdc

echo done installing LCD driver.

sync
sync
fsck /dev/mmcblk1p1 -y -f
fsck /dev/mmcblk0p1 -y -f

exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Checking locale.
if grep &quot;&quot; /etc/default/locale
then
        echo default locale is set.
else
        echo setting default local to en_US.UTF-8
        echo &quot;LANG=en_US.UTF-8&quot; &gt; /etc/default/locale
fi

echo &quot;Install wireless or WIFI related packages&quot;
sudo apt-get -y -q install wireless-tools
sudo apt-get -y -q install wpasupplicant

if [ -e /lib/udev/rules.d/80-net-setup-link.rules ]
then
   echo &quot;Make sure to override unpredictable naming for WIFI interface - Always use wlanX&quot;
   sudo ln -s /lib/udev/rules.d/80-net-setup-link.rules /etc/udev/rules.d/80-net-setup-link.rules
fi

echo &quot;Install Ethernet tools required for detecting cable plugged and unplugged events&quot;
sudo apt-get -y -q install ifplugd

echo &quot;Set up ifplugd configuration and actions for detecting ethernet cable unplugged and plugged events&quot;
if [ -e /etc/default/ifplugd ]
then
   sed -i &apos;s/INTERFACES=&quot;&quot;/INTERFACES=&quot;eth0&quot;/g&apos; /etc/default/ifplugd
   sed -i &apos;s/-d10/-d5/g&apos; /etc/default/ifplugd
fi

if [ -e /etc/ifplugd/action.d/ifupdown ]
then
   sed -i &apos;s/\/sbin\/ifdown $1/ip addr flush dev $1 \&amp;\&amp; \/sbin\/ifdown $1/g&apos; /etc/ifplugd/action.d/ifupdown
fi

if [ -e /etc/network/if-down.d/flush-ethernet-interface-ip ]
then
   echo &quot;Symbolic link for flush-ethernet-interface-ip is already created&quot;
else
   echo &quot;Create Symbolic link for if-down-d flush-ethernet-interface-ip&quot;
   ln -s /root/chaipcr/deploy/device/flush-ethernet-interface-ip.sh /etc/network/if-down.d/flush-ethernet-interface-ip
fi

if [ -e /etc/network/if-pre-up.d/flush-ethernet-interface-ip ]
then
   echo &quot;Symbolic link for if-pre-up-d flush-ethernet-interface-ip is already created&quot;
else
   echo &quot;Create Symbolic link for flush-ethernet-interface-ip&quot;
   ln -s /root/chaipcr/deploy/device/flush-ethernet-interface-ip.sh /etc/network/if-pre-up.d/flush-ethernet-interface-ip
fi

if [ -e /etc/network/if-up.d/force-ethernet-up ]
then
   echo &quot;Symbolic link for force-ethernet-up is already created&quot;
else
   echo &quot;Create Symbolic link for force-ethernet-up&quot;
   ln -s /root/chaipcr/deploy/device/force-ethernet-up.sh /etc/network/if-up.d/force-ethernet-up
fi

echo setting up website on ngixn
if [ -e /etc/nginx/sites-available ]
then
    echo Nginx is installed
else
   echo Nginx is not installed
   exit 0
fi

cp ~/chaipcr/web/config/etc/nginx/chaipcr /etc/nginx/sites-available/
cd /etc/nginx/sites-enabled
sudo ln -s ../sites-available/chaipcr
rm default 

cat &lt;&lt;EOF &gt;&gt; /etc/nginx/conf.d/chaipcr_unicorn.conf
#Add the following to /etc/nginx/nginx.conf under the http section:
    # Unicorn
     upstream unicorn {
       server unix:/root/shared/sockets/unicorn.sock fail_timeout=0;
    }
EOF

update-rc.d -f nginx defaults
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Unicorn
mkdir ~/shared
mkdir ~/shared/pids
mkdir ~/shared/log
mkdir ~/shared/sockets 

cp ~/chaipcr/web/config/etc/unicorn_init.d /etc/init.d/unicorn
chmod +x /etc/init.d/unicorn
mkdir /etc/unicorn
cp ~/chaipcr/web/config/etc/unicorn/chaipcr.conf /etc/unicorn/
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo closing swap file
sync
swapoff -a
/sbin/swapoff  -a

echo clearing more space
apt-get -q -y --fix-broken install
rm /sdcard/factory/swapfile
cd

if $is_dev
then
      echo Building a debug image
      exit 0
fi

# remove folders that are needed for the production image. An extra chance to freeup more space is by linking realtime and the browser statically.
rm -r /opt/QtEmbedded/bin/  /opt/QtEmbedded/mkspecs /opt/QtEmbedded/include

find . -name .git -execdir rm -r {} \;
find . -name *.o  -exec rm {} \;
find / -name .git -execdir rm -r {} \;
rm -r /var/cache/apt /var/log/ /opt/QtEmbedded/imports /opt/QtEmbedded/translations /opt/QtEmbedded/include /opt/QtEmbedded/tests /opt/QtEmbedded/mkspecs ~/julia ~/lib
mkdir /var/log/ -p
find /root/.julia/v0.6/ -name .git | grep -v METADATA | xargs -I &apos;{}&apos; rm -r &apos;{}&apos;
apt update

exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo cleanup to free up some space
df -h
if $is_dev
then
      echo Building a debug image
      exit 0
fi

# should be safe to remove the following: [only 5M save]
#cd /opt/QtEmbedded/lib
#rm libQtMultimedia* libQtDeclarative* libQtScriptTools* libQtSql* libQtSv* libQtTest* libQtXml* libQtScript*

for retryloop in 1 2 3
do
apt-get  -y -q --purge autoremove g++-4.7 g++-4.8 gcc-4.8 g++-4.8 gcc-4.8 g++-4.8 
apt-get  -y -q --purge autoremove libblas3gf libblas3gf
apt-get  -y -q --purge autoremove parted linux-headers-`uname -r` automake build-essential cmake curl device-tree-compiler evtest g++ gfortran git i2c-tools libarpack2 libblas-common libblas-dev libblas3 libedit-dev libfftw3-dev libfftw3-double3 libfftw3-single3 libfontconfig1-dev libfreetype6-dev libgfortran3 libgfortran3 libgmp3-dev liblapack3 liblapack3gf libllvm3.8 libmetis5 libmpfr-dev libopenblas-base libopenblas-dev libqt4-webkit libssl-dev libtool libunwind8 libxcursor-dev libxext-dev libxfixes-dev libxft-dev libxi-dev libxml2-dev libxrandr-dev libxrender-dev libxslt-dev lsb-release m4 nodejs ntp ntpdate pkg-config python unzip

apt-get install -y -q liblapack-dev 
apt-get -f  -y -q install

apt-get  -y -q --purge autoremove fakeroot 
apt-get -f  -y -q install

apt-get --purge  -y -q autoremove g++
apt-get  -y -q --purge autoremove gcc 
apt-get  -y -q -f install

apt-get  -y -q --purge autoremove gfortran* git i2c-tools 
apt-get  -y -q --purge autoremove icu-devtools
apt-get -y -q remove qt4-default qt5-default gettext
DEBIAN_FRONTEND=noninteractive apt-get -q -y autoremove --purge libgtk-3-0
DEBIAN_FRONTEND=noninteractive apt-get -q -y autoremove --purge gcc-4.9 cmake
DEBIAN_FRONTEND=noninteractive apt-get -q -y autoremove --purge python2*

apt-get autoremove -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data

apt-get -y -q autoremove --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data

df -h
done

DEBIAN_FRONTEND=noninteractive apt-get -q -y install gettext
DEBIAN_FRONTEND=noninteractive apt-get -q -y install libgtk-3-0
apt-get -y -q install libpango1.0-0 libglib2.0-0 libcairo2
apt-get -q -y install libboost-chrono-dev libboost-system-dev
if [ -e /etc/bypassjulia.flag ]
then
    echo Julia is not installed
else
    apt-get -q -y install hdf5-tools
fi

df -h

echo Adding USB shutdown script

cat &gt; /uEnv.txt &lt;&lt; EOF
# Building ${PROJECT_NAME} - Build # ${BUILD_NUMBER}.. check at ${BUILD_URL}

shutdown_usb_power=i2c dev 0;i2c mw 0x24 1 0xec
uenvcmd=echo Shutting down USB powered devices.;run shutdown_usb_power

EOF

exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo zeroing 2

dd if=/dev/zero of=/zeros.bigfile bs=16M
sync
rm /zeros.bigfile
sync
mkdir -p /tmp/zeroer
if mount /dev/mmcblk1p2 /tmp/zeroer
then
    dd if=/dev/zero of=/tmp/zeroer/zeros.bigfile bs=16M
    sync
    rm /tmp/zeroer/zeros.bigfile
    sync
    umount /tmp/zeroer
fi

if mount /dev/mmcblk1p3 /tmp/zeroer
then
    dd if=/dev/zero of=/tmp/zeroer/zeros.bigfile bs=16M
    sync
    rm /tmp/zeroer/zeros.bigfile
    sync
    umount /tmp/zeroer
fi

echo basic beaglebone setup done!</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo changing root password to chaipcr and disabling login prompt on console
sudo systemctl disable getty@tty1.service
echo &quot;root:chaipcr&quot; | chpasswd
sync
echo rebooting
shutdown -r 1
echo a reboot is scheduled after a minute</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
sleep 60
echo waiting for a restart
for i in {0..300..60}
do
	echo &quot;Waiting for the build device to become ready! $i&quot;
	sleep 60
    if ping $build_machine -c 2
    then
    	echo device is finally up !!
        sleep 30
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo device is still connectable!

if $is_dev
then
      echo Building a debug image
      exit 0
fi

cd
echo unmounting any sdcard folders
umount /sdcard/*
umount /dev/mmcblk0p*

rm -r /sdcard/upgrade
mkdir -p /sdcard/upgrade/

echo cleaning up sdcard
LC_ALL=C sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0xe,*
__EOF__

/sbin/partprobe /dev/mmcblk0
mkfs.ext4 /dev/mmcblk0p1 -F

sync
sync
 fsck /dev/mmcblk1p1 -y -f
 fsck /dev/mmcblk0p1 -y -f

mount /dev/mmcblk0p1 /sdcard/factory/

df -h

exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>echo all done for $build_machine, you can call create_factory_settings_sdcard job to create a factory settings image. root password is chaipcr

exit 0</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.8"/>
  </buildWrappers>
</project>