<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build basic debian image with kernel version 4.x</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>build_machine</name>
          <description>Building machine</description>
          <defaultValue>10.0.100.240</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>check_badblocks</name>
          <description>Check if there are any bad blocks on eMMC. Takes more than an hour.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>download_prefix</name>
          <description>Download folder URL</description>
          <defaultValue>http://10.0.1.20/download</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo checking Jenkins server
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
echo user: $(whoami)
ping google.com -c 10
echo Checking for nessasery packages:
sudo apt-get -y -q install sshpass parted mdadm

sudo chmod 777      /var/lib/jenkins/.ssh/known_hosts
ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
#ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine

sshpass -p temppwd ssh -t -oStrictHostKeyChecking=no debian@$build_machine &lt;&lt;&apos;ENDSSH&apos;
echo enable root access with no password
echo temppwd | sudo -S su
echo temppwd | sudo -S sed -i -e &apos;s:PermitEmptyPasswords no:PermitEmptyPasswords yes:g&apos; /etc/ssh/sshd_config
sudo sed -i -e &apos;s:#PermitEmptyPasswords:PermitEmptyPasswords:g&apos; /etc/ssh/sshd_config
sudo sed -i -e &apos;s:UsePAM yes:UsePAM no:g&apos; /etc/ssh/sshd_config
sudo sed -i -e &apos;s:PermitRootLogin without-password:PermitRootLogin yes:g&apos; /etc/ssh/sshd_config
sudo sed -i -e &apos;s:PermitRootLogin prohibit-password:PermitRootLogin yes:g&apos; /etc/ssh/sshd_config
sudo sed -i -e &apos;s:#PermitRootLogin:PermitRootLogin:g&apos; /etc/ssh/sshd_config


sudo passwd -d -u root
sudo su

echo patching sshd_config
    
#sudo cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
#KexAlgorithms diffie-hellman-group1-sha1
#KexAlgorithms ecdh-sha2-nistp256
#KexAlgorithms ecdh-sha2-nistp384
#KexAlgorithms ecdh-sha2-nistp521
#KexAlgorithms diffie-hellman-group-exchange-sha256
#KexAlgorithms diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#EOF
sudo cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
EOF

ssh-keygen -A || true
sudo /etc/init.d/ssh restart
service ssh restart

echo ssh daemon is restarted


ENDSSH

echo root access patching returned


if grep $build_machine /var/lib/jenkins/.ssh/config
then
	echo /var/lib/jenkins/.ssh/config was patched already
else
	echo patching /var/lib/jenkins/.ssh/config
	cat &lt;&lt;EOF &gt;&gt; /var/lib/jenkins/.ssh/config
Host $build_machine
		KexAlgorithms +diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers +3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#		KexAlgorithms +diffie-hellman-group1-sha1
#        KexAlgorithms +curve25519-sha256@libssh.org
#        KexAlgorithms +ecdh-sha2-nistp256
#        KexAlgorithms +ecdh-sha2-nistp384
#        KexAlgorithms +ecdh-sha2-nistp521
#        KexAlgorithms +diffie-hellman-group-exchange-sha256
#        KexAlgorithms +diffie-hellman-group14-sha1
EOF
fi

#if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
#then
#	echo sshd_config was patched already
#else
#	echo patching sshd_config
#	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
#KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#EOF
#	sudo service sshd restart
#fi


echo deleting root password in case of chaipcr
sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;passwd -d -u root&quot;
#echo done deleting root password


if ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;

if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
then
	echo sshd_config was patched already
else
	echo patching sshd_config
    
	cat &lt;&lt;EOF&gt;&gt; /etc/ssh/sshd_config
		KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
EOF
	ssh-keygen -A || true

	sudo service sshd restart
    sudo service ssh restart
    /etc/init.d/ssh restart
	echo device is patched
    ifconfig
fi

exit 0
ENDSSH
then
   echo &quot;-t worked&quot;
else
echo &quot; trying -tt&quot;
ssh -tt -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;

if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
then
	echo sshd_config was patched already
else
	echo patching sshd_config
    
	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr

EOF
	ssh-keygen -A || true

	
	sudo service sshd restart
    sudo service ssh restart
    /etc/init.d/ssh restart
	echo device is patched
    ifconfig
fi

exit 0
ENDSSH

fi

echo Returned to host. connection check:
ssh -oStrictHostKeyChecking=no -t root@$build_machine &apos;exit 0&apos;

if ssh -oStrictHostKeyChecking=no -tt root@$build_machine &apos;exit 0&apos;
then
    echo key is added ok
else
    echo error adding key to known hosts.. retrying..
    chmod 777 /var/lib/jenkins/.ssh/known_hosts
	ssh -oStrictHostKeyChecking=no -t root@$build_machine &apos;exit 0&apos;
fi

counter=0
until ssh -tt root@$build_machine &apos;exit 0&apos;
do
	counter=$(( $counter + 1 ))
    if [ $counter -gt 10 ]
    then
    	echo Beaglebone is not available.
    	exit 1
    fi
    
	echo waiting for beaglebone to become connectable.
	sleep 20
done

echo done connection check.
sleep 20</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Building ${PROJECT_NAME} - Build # ${BUILD_NUMBER}.. result is at ${BUILD_URL}&quot;
echo &quot;Slave Beaglebone at ${build_machine}&quot;
echo checking build device 
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h

rm /var/lib/dpkg/lock
echo -e &quot;\n&quot; | dpkg --configure -a

# kill processes that are holding the sdcard to be able to unmount and write to it.
pkill julia
pkill julia
pkill julia
pkill julia
pkill realtime
pkill realtime

swapoff -a

umount /dev/mmcblk0p*
umount /sdcard/*

lsblk
if mount | grep mmcblk0
then
  echo &quot;Error: can&apos;t unmount sdcard!&quot;
  exit 1
fi
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command># download flasher image

swapoff -a
mount -o remount,rw /
echo 0 &gt; /proc/sys/kernel/hung_task_timeout_secs

#image_filename=bone-debian-9.3-console-armhf-2017-12-10-1gb.img.xz # 551478c0aabd85c25ff68b73de691616009287de47bd8803e6c5adb3fe791e99
image_filename=bone-debian-9.3-console-armhf-2018-01-28-1gb.img.xz # 223dc801c18edbcb9060e6a369eea38f95e09ff16da57f9394c9c8b5ce2c297d
#image_filename=bone-debian-9.4-console-armhf-2018-06-17-1gb.img.xz # 56b27f7e659e4bb8e894b2882a1d64c9b0f6ed4612754cc7316ead01ec1eac1e

rm $image_filename || true
rm -r .julia

wget $download_prefix/$image_filename || exit 1

#Verify Image with:
if sha256sum $image_filename | grep 223dc801c18edbcb9060e6a369eea38f95e09ff16da57f9394c9c8b5ce2c297d
then
	echo Checksum OK..
else
	echo Checksum error $(sha256sum $image_filename)
	exit 1
fi

echo installing missing packages.

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9D6D8F6BC857C906
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 7638D0442B90D010

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1655A0AB68576280
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys D284E608A4C46402
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CF979FFA3D3D3ACC
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 06F90DE5381BA480

ping google.com -c 10
apt-get update
apt-get install -f -y -q

apt-get install xz-utils parted  -y -q  || exit 1
apt-get install -f -y -q

echo wrting to sdcard
umount /dev/mmcblk0p* || true
echo flashing SDCard

echo Image filename: $image_filename
if [ -e /dev/mmcblk0 ] &amp;&amp; [ -e /dev/mmcblk1 ] 
then
   echo &quot;eMMC and SDCard found&quot;
else
   echo &quot;SDCard is not found&quot;
   exit 1
fi

if mount | grep /dev/mmcblk0
then
      echo &quot;SDCard is still mounted, or it was inserted after booting. Please reboot&quot;
      exit 1
fi
echo Burning $image_filename to /dev/mmcblk0
if xzcat $image_filename | dd of=/dev/mmcblk0
then
    echo SDCard flashed successfully
else
   echo error flashing sdcard
   exit 1
fi

echo done flashing sdcard
sync

#apt-get install -y -q parted
blockdev --flushbufs /dev/mmcblk0
partprobe /dev/mmcblk0
echo patching sdcard
mount /dev/mmcblk0p1 /mnt  || exit 1
cd /mnt/opt/scripts/tools/eMMC/

echo first patching sshd_config
cat &lt;&lt;EOF &gt;&gt; /mnt/etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
EOF

if [ -e functions-201712.sh.patch ]
then
   echo sdcard got patched before
else

wget $download_prefix/functions-201712.sh.patch
patch -i functions-201712.sh.patch
rm functions-201712.sh.patch

if $check_badblocks
then
  echo badblocks check is active
else
  echo disable badblocks check
  sed &quot;s/badblocks/#badblocks/&quot; -i functions.sh
fi

echo removing root password
root_password=$(cat /mnt/etc/shadow | grep root | awk -F &apos;:&apos; &apos;{print $2}&apos;)
sed -i -e &apos;s:&apos;$root_password&apos;::g&apos; /mnt/etc/shadow

echo patching sshd_config
sed -i -e &apos;s:PermitEmptyPasswords no:PermitEmptyPasswords yes:g&apos; /mnt/etc/ssh/sshd_config
sed -i -e &apos;s:UsePAM yes:UsePAM no:g&apos; /mnt/etc/ssh/sshd_config
sed -i -e &apos;s:PermitRootLogin without-password:PermitRootLogin yes:g&apos; /mnt/etc/ssh/sshd_config

sed -i -e &apos;s:PermitEmptyPasswords no:PermitEmptyPasswords yes:g&apos; /mnt/etc/ssh/sshd_config
sudo sed -i -e &apos;s:#PermitEmptyPasswords:PermitEmptyPasswords:g&apos; /mnt/etc/ssh/sshd_config
sudo sed -i -e &apos;s:UsePAM yes:UsePAM no:g&apos; /etc/ssh/sshd_config
sudo sed -i -e &apos;s:PermitRootLogin without-password:PermitRootLogin yes:g&apos; /mnt/etc/ssh/sshd_config
sudo sed -i -e &apos;s:PermitRootLogin prohibit-password:PermitRootLogin yes:g&apos; /mnt/etc/ssh/sshd_config
sudo sed -i -e &apos;s:#PermitRootLogin:PermitRootLogin:g&apos; /mnt/etc/ssh/sshd_config

echo done patching sshd_config

echo patching uEnv.txt
echo cmdline=init=/opt/scripts/tools/eMMC/init-eMMC-flasher-v3.sh &gt;&gt; /mnt/boot/uEnv.txt

fi

touch /forcefsck
touch /mnt/forcefsck
sync
cd
umount /mnt || true

echo disabling eMMC boot
mount -o remount,rw /boot/uboot || true
rm -r /boot || true
mv /boot /boot_disabled  --backup=numbered -f

rm ~/$image_filename || true

sync
sync

echo Restarting build device..
shutdown -r 1
echo &quot;Restart scheduled after a min&quot;

#exit 0

</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
# waiting 20min for the bulding device to flash
echo &quot;Waiting for the build device ($build_machine) to flash and become ready!&quot;
sleep 500

for i in {0..1200..60}
do
	echo &quot;Waiting for the build device ($build_machine) to become ready! $i&quot;
	sleep 60

	if ping $build_machine -c 2
    then
    	echo device is finally up !!
        sleep 60
        
		ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
		ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;
		echo $build_machine device is connectable.. 
		lsblk
		exit 0
ENDSSH

		sleep 10
		echo returned to host. connection check:
		counter=0
		until ssh -t root@$build_machine &apos;exit 0&apos;
		do
			counter=$(( $counter + 1 ))
    		if [ $counter -gt 20 ]
    		then
    			echo Beaglebone is not available.
    			exit 1
		    fi
			echo &quot;waiting for ssh on beaglebone to become connectable.&quot;
			sleep 10
		done
		echo ssh is connectable.
        sleep 10
        exit 0
    fi
done

echo &quot;timeout waiting for the device to become ready!&quot;
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Updating kernel on $build_machine
#
#cat &lt;&lt;EOF &gt;&gt; /etc/apt/sources.list
#deb [arch=armhf] http://repos.rcn-ee.com/debian/ jessie main
#deb-src [arch=armhf] http://repos.rcn-ee.com/debian/ jessie main
#EOF

cd
wget http://repos.rcn-ee.net/ubuntu/conf/repos.rcn-ee.net.gpg.key
apt-key add repos.rcn-ee.net.gpg.key
rm repos.rcn-ee.net.gpg.key

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9D6D8F6BC857C906
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 7638D0442B90D010

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1655A0AB68576280
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys D284E608A4C46402
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CF979FFA3D3D3ACC

apt-key update
ping google.com -c 10
apt-get update 
apt-get autoremove
apt-get install -y -q -f

apt-get install -y -q git ntpdate  || exit 1
apt-get install -y -q -f

apt-get install -y -q unzip parted  || exit 1
apt-get install -y -q -f

apt-get install -y -q autoremove
dpkg --configure -a

df -h
ntpdate -b -s -u pool.ntp.org

#update-initramfs -u

	cd /opt/scripts/tools/
        rm eMMC/init-eMMC-flasher-v3.sh
#	git stash save --keep-index
	git pull

#	./update_kernel.sh --ti-rt-channel --lts-4_4
#        ./update_kernel.sh --kernel 4.4.24-ti-rt-r58
#./update_kernel.sh --ti-rt-channel --lts-4_1

#     ./update_kernel.sh --ti-channel --lts-4_9

touch /forcefsck
sync 
shutdown -r 1

echo restart scheduled after a min-2
#sleep 30

#exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo &quot;waitting for a restart&quot;
for i in {0..300..60}
do
	echo &quot;Waiting for the build device to become ready! $i&quot;
	sleep 60
    if ping $build_machine -c 1
    then
    	echo device is finally up
        sleep 120
    	
        
        counter=0
		until ssh -tt root@$build_machine &apos;exit 0&apos;
		do
			counter=$(( $counter + 1 ))
    		if [ $counter -gt 10 ]
    		then
    			echo Beaglebone is not available.
    			exit 1
    		fi
			echo waiting for beaglebone to become connectable $counter .
			sleep 20
	   
		done


        echo Moving to next task
        
        
        
        
        
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo device is restarted.. 
ping google.com -c 10

apt-key update
apt-get update

apt-get -q -y upgrade
apt-get -q -y dist-upgrade

update-initramfs -u
touch /forcefsck

lsblk
df -h

echo image creation done.

exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo zeroing
echo 1500 &gt; /proc/sys/kernel/hung_task_timeout_secs

dd if=/dev/zero of=/zeros.bigfile bs=16M
sleep 60
sync
echo done writing
rm /zeros.bigfile
sleep 60
sync
echo done freeing up

mkdir -p /tmp/zeroer
if mount /dev/mmcblk1p2 /tmp/zeroer
then
    dd if=/dev/zero of=/tmp/zeroer/zeros.bigfile bs=16M
    sleep 60
    sync
    rm /tmp/zeroer/zeros.bigfile
    sleep 60
    sync
    umount /tmp/zeroer
fi

if mount /dev/mmcblk1p3 /tmp/zeroer
then
    dd if=/dev/zero of=/tmp/zeroer/zeros.bigfile bs=16M
    sleep 60
    sync
    rm /tmp/zeroer/zeros.bigfile
    sleep 60
    sync
    umount /tmp/zeroer
fi

echo basic image zeroing done! 
sync
mkdir /data /perm || true
echo reformatting /data partition
mkfs.ext4 -F /dev/mmcblk1p2 -L data
sync
echo restarting!

shutdown -r 1

exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo &quot;waitting for a restart&quot;
sleep 90

for i in {0..1500..60}
do
	echo &quot;Waiting for the build device to become ready! $i&quot;
	sleep 60
    if ping $build_machine -c 1
    then
    	echo device is up and ready!
        sleep 30
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.8"/>
  </buildWrappers>
</project>