<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Restore latest eMMC image to the connected BBB.&#xd;
- create a grep sdcard&#xd;
- write latest eMMC image to the grep sdcard&#xd;
- mark function at reversed&#xd;
- start BBB on grep mode&#xd;
- restart BBB on normal more&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>build_machine</name>
          <description></description>
          <defaultValue>10.0.100.240</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>download_prefix</name>
          <description>Download server url. Example: http://10.0.1.20/download</description>
          <defaultValue>http://10.0.1.20/download</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>input_image_prefix</name>
          <description>eMMC name prefix.
</description>
          <defaultValue>Jessie49Release</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>123</authToken>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo checking Jenkins server
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
echo user: $(whoami)

echo Restoring image to device at $build_machine
echo Environmental variables:
env

echo Checking for nessasery packages:
sudo apt-get -y -q install sshpass parted mdadm

if grep $build_machine ~/.ssh/config
then
	echo ~/.ssh/config was patched already
else
	echo patching ~/.ssh/config
	cat &lt;&lt;EOF &gt;&gt; ~/.ssh/config
Host $build_machine
		KexAlgorithms +diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers +3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#		KexAlgorithms +diffie-hellman-group1-sha1
#        KexAlgorithms +curve25519-sha256@libssh.org
#        KexAlgorithms +ecdh-sha2-nistp256
#        KexAlgorithms +ecdh-sha2-nistp384
#        KexAlgorithms +ecdh-sha2-nistp521
#        KexAlgorithms +diffie-hellman-group-exchange-sha256
#        KexAlgorithms +diffie-hellman-group14-sha1
EOF
fi

#if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
#then
#	echo sshd_config was patched already
#else
#	echo patching sshd_config
#	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
#KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#EOF
#	sudo service sshd restart
#fi

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine

#echo deleting root password in case of chaipcr
#sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;passwd -d -u root&quot;

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
sshpass -p chaipcr ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt; ENDSSH

if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
then
	echo sshd_config on $build_machine was patched already
else
	echo patching sshd_config
    
	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
		KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
	EOF
	ssh-keygen -A || true

	sudo service sshd restart
    sudo service ssh restart
    /etc/init.d/ssh restart
	echo $build_machine patched
    ifconfig
fi

exit 0
ENDSSH

echo returned to host. connection check:
counter=0
until sshpass -p chaipcr ssh -t root@$build_machine &apos;exit 0&apos;
do
	counter=$(( $counter + 1 ))
    if [ $counter -gt 10 ]
    then
    	echo Beaglebone is not available.
    	exit 1
    fi
	echo waiting for beaglebone to become connectable.
	sleep 10
    
done

echo done connection check.
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Building ${PROJECT_NAME} - Build # ${BUILD_NUMBER}.. result is at ${BUILD_URL}&quot;
echo &quot;Slave Beaglebone at ${build_machine}&quot;
echo checking build device 
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h

# debug markers 
# mark=`date &apos;+%m_%d__%H_%M_%S&apos;`;mkdir -p /root/REST_B4_rootfs_${mark} /perm/REST_B4_perm_${mark} /data/REST_B4_data_${mark};sync

echo processing incomplete installations
dpkg --configure -a --force-confdef

echo disable swapping
swapoff -a

umount /dev/mmcblk0p*
umount /sdcard/*

lsblk
if mount | grep mmcblk0
then
  echo &quot;Error: can&apos;t unmount sdcard!&quot;
  exit 1
fi

echo installing missing packages.
apt-get update
echo installing parted.
apt-get install parted -y -q
partprobe /dev/mmcblk0

if LC_ALL=C sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0xe,*
__EOF__
then
	echo SDCard formated!
else
	echo error formatting SDCard. retrying..
        partprobe /dev/mmcblk0
        dd if=/dev/zero of=/dev/mmcblk0 bs=51200 count=1000
        sync
        partprobe /dev/mmcblk0
 LC_ALL=C sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0xe,*
__EOF__
        mkfs.ext4 /dev/mmcblk0p1
        partprobe /dev/mmcblk0

if LC_ALL=C sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0xe,*
__EOF__
        then
	       echo SDCard partitioned!
        else
 	       echo error formatting SDCard.
#	       exit 1
       fi
fi

partprobe /dev/mmcblk0
echo Formatting..

if command mkfs.fat
then
      mkfs.fat /dev/mmcblk0p1 -n CHAIBIO
else
      mkfs.vfat /dev/mmcblk0p1 -n CHAIBIO
fi
echo SDCard formatted!

mkdir -p /tmp/grep_sdcard
if mount /dev/mmcblk0p1 /tmp/grep_sdcard
then
     echo SDCard mounted successfully.
else
     echo Failed to mount SDCard.
     exit 1
fi

lsblk
df -h
exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>ls
echo copying grep sdcard contents
sshpass -p chaipcr scp -r devops/grabimage_sdcard/* root@$build_machine:/tmp/grep_sdcard/
sshpass -p chaipcr scp -r devops/grabimage_sdcard/uEnv.sdcard.txt root@$build_machine:/tmp/grep_sdcard/uEnv.txt

emmc_image_latest_compressed=${input_image_prefix}_emmc.img.tgz
emmc_image_latest_url=$download_prefix/${emmc_image_latest_compressed}
emmc_image_latest_tmp_compressed=/tmp/${BUILD_NUMBER}/${emmc_image_latest_compressed}

emmc_image_latest_tmp_uncompressed_part1=/tmp/${BUILD_NUMBER}/eMMC_part1.img
emmc_image_latest_tmp_uncompressed_part2=/tmp/${BUILD_NUMBER}/eMMC_part2.img

mkdir -p /tmp/${BUILD_NUMBER}
echo downloading and restoring $emmc_image_latest_compressed

wget $emmc_image_latest_url -O $emmc_image_latest_tmp_compressed
tar xfvz $emmc_image_latest_tmp_compressed --strip=3 -C /tmp/${BUILD_NUMBER}

echo latest image downloaded
ls -ahl /tmp/${BUILD_NUMBER}/eMMC_part*

sshpass -p chaipcr scp -r /tmp/${BUILD_NUMBER}/eMMC_part*.img root@$build_machine:/tmp/grep_sdcard/
rm $emmc_image_latest_tmp_uncompressed_part1  || true
rm $emmc_image_latest_tmp_uncompressed_part2  || true
rm $emmc_image_latest_tmp_compressed || true


</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo patching grep sdcard to boot only once
#cp /tmp/grep_sdcard/autorun.sh /tmp/grep_sdcard/autorun.sh.org

sed &quot;s/reboot/rm \/mnt\/uEnv.txt ; reboot/&quot; -i /tmp/grep_sdcard/autorun.sh
sed &quot;s/halt/rm \/mnt\/uEnv.txt ; reboot # /&quot; -i /tmp/grep_sdcard/autorun.sh
sed &quot;s/restore=false/restore=true/&quot; -i /tmp/grep_sdcard/pack_latest_version.sh

sed &quot;s/reboot/rm \/mnt\/uEnv.txt ; reboot/&quot; -i /tmp/grep_sdcard/pack_latest_version.sh
sed &quot;s/halt/rm \/mnt\/uEnv.txt ; reboot # /&quot; -i /tmp/grep_sdcard/pack_latest_version.sh

#mv /tmp/grep_sdcard/autorun.sh  /tmp/grep_sdcard/autorun.sh.tmp

sync
ls /tmp/grep_sdcard -ahl

umount /tmp/grep_sdcard

echo scheduling a restart in a min
shutdown -r 1
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

rm -r /tmp/${BUILD_NUMBER} || true

echo waiting for a restart
sleep 120
for i in {0..1200..60}
do
	echo &quot;Waiting for the build device to become ready! $i&quot;
	sleep 60
    if ping $build_machine -c 3
    then
    	echo device is finally up !!
        sleep 300
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo All done.
# debug markers 
# mark=`date &apos;+%m_%d__%H_%M_%S&apos;`;mkdir -p /root/jr_$download_prefix_rootfs_${mark} /perm/jr_$download_prefix_perm_${mark} /data/jr_$download_prefix_data_${mark};sync

exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.8"/>
  </buildWrappers>
</project>